name: CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:

jobs:
  build-lint-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      # 1Ô∏è‚É£ Checkout du code
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3Ô∏è‚É£ Installer les d√©pendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] black isort ruff pytest pytest-cov build twine

      # 4Ô∏è‚É£ V√©rifier le formatage Black
      - name: Black check
        run: black --check .

      # 5Ô∏è‚É£ V√©rifier les imports avec isort
      - name: isort check
        run: isort --check-only .

      # 6Ô∏è‚É£ Linter et corriger avec Ruff
      - name: Ruff check
        run: ruff check .

      # 7Ô∏è‚É£ Lancer les tests et g√©n√©rer coverage
      - name: Run tests with coverage
        run: pytest --cov=hyperspherical --cov-report=xml --maxfail=1 --disable-warnings -q

      # 8Ô∏è‚É£ Upload coverage to Codecov
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

      # 9Ô∏è‚É£ Build (pr√©paration pour PyPI)
      - name: Build distribution
        run: python -m build

      # Afficher le contenu du dossier dist
      - name: List dist folder
        run: ls -lh dist/

      #  üîü (Optionnel) Publier sur PyPI si c‚Äôest main et tag et le secret est d√©fini
      - name: Publish to PyPI
        if: github.ref_type == 'tag' && secrets.PYPI_API_TOKEN != ''
        env:
          TWINE_USERNAME: __token__          # obligatoire pour API token PyPI
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m build                  # g√©n√®re dist/ (wheel + sdist)
          twine upload dist/*               # publie sur PyPI